{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "437cb574928cd606e28bcebd28861d3e37effe5e028f6c03824117a74357e5d5de57b7679aa9dac9faf2c6d2974c08ce3fe34c5f4c87102355bb297f786759a4"
}