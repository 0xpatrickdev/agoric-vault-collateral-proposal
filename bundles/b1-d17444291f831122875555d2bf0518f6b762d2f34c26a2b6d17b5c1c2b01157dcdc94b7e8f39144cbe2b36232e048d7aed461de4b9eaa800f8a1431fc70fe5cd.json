{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "d17444291f831122875555d2bf0518f6b762d2f34c26a2b6d17b5c1c2b01157dcdc94b7e8f39144cbe2b36232e048d7aed461de4b9eaa800f8a1431fc70fe5cd"
}