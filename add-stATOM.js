// This is generated by writeCoreProposal; please edit!
/* eslint-disable */

const manifestBundleRef = {bundleID:"b1-3cf6f8499883ff9edc294bf784cb0a93af68829da3b469b6c4a53f33c785c416cdb398169a757cf448a1635a3a6b21ac7881d07f9dd184ff3d6579905f44cb5e"};
const getManifestCall = harden([
  "getManifestForAddAssetToVault",
  {
    debtLimitValue: undefined,
    interchainAssetOptions: {
      decimalPlaces: 6,
      denom: "ibc/toystatom",
      initialPrice: undefined,
      issuerBoardId: undefined,
      keyword: "STATOM",
      oracleBrand: "STATOM",
      proposedName: "stATOM",
    },
    interestRateValue: undefined,
    scaledPriceAuthorityRef: {
      bundleID: "b1-5da781b83f8a3e4e173184e0641a9b95f66aad7c4225a364ef081fd1c124e3c33fc4a04a3dd59eebcf537b3e7944f38429fdbe3713c660b9d272ff4532cf540a",
    },
  },
]);
const overrideManifest = {
  addAssetToVault: {
    brand: {
      consume: {
        IST: true,
      },
    },
    consume: {
      agoricNamesAdmin: true,
      auctioneerKit: "auctioneer",
      vaultFactoryKit: "vaultFactory",
    },
    instance: {
      consume: true,
    },
  },
  publishInterchainAssetFromBank: {
    consume: {
      agoricNamesAdmin: true,
      bankManager: true,
      bankMints: true,
      reserveKit: true,
      startUpgradable: true,
      vBankKits: true,
    },
    installation: {
      consume: {
        mintHolder: true,
      },
    },
    produce: {
      bankMints: true,
      vBankKits: true,
    },
  },
  registerScaledPriceAuthority: {
    consume: {
      agoricNamesAdmin: true,
      priceAuthority: true,
      priceAuthorityAdmin: true,
      scaledPriceAuthorityKits: true,
      startUpgradable: true,
    },
    installation: {
      consume: {
        scaledPriceAuthority: true,
      },
    },
    produce: {
      scaledPriceAuthorityKits: true,
    },
  },
};

// Make the behavior the completion value.
(({
  manifestBundleRef,
  getManifestCall,
  overrideManifest,
  E,
  log = console.info,
  restoreRef: overrideRestoreRef,
}) => {
  const { entries, fromEntries } = Object;

  // deeplyFulfilled is a bit overkill for what we need.
  const shallowlyFulfilled = async obj => {
    if (!obj) {
      return obj;
    }
    const ents = await Promise.all(
      entries(obj).map(async ([key, valueP]) => {
        const value = await valueP;
        return [key, value];
      }),
    );
    return fromEntries(ents);
  };

  /** @param {ChainBootstrapSpace & BootstrapPowers & { evaluateBundleCap: any }} allPowers */
  const behavior = async allPowers => {
    // NOTE: If updating any of these names extracted from `allPowers`, you must
    // change `permits` above to reflect their accessibility.
    const {
      consume: { vatAdminSvc, zoe, agoricNamesAdmin },
      evaluateBundleCap,
      installation: { produce: produceInstallations },
      modules: {
        utils: { runModuleBehaviors },
      },
    } = allPowers;
    const [exportedGetManifest, ...manifestArgs] = getManifestCall;

    /** @type {(ref: import\('./externalTypes.js').ManifestBundleRef) => Promise<Installation<unknown>>} */
    const defaultRestoreRef = async ref => {
      // extract-proposal.js creates these records, and bundleName is
      // the name under which the bundle was installed into
      // config.bundles
      const p =
        'bundleName' in ref
          ? E(vatAdminSvc).getBundleIDByName(ref.bundleName)
          : ref.bundleID;
      const bundleID = await p;
      const label = bundleID.slice(0, 8);
      return E(zoe).installBundleID(bundleID, label);
    };
    const restoreRef = overrideRestoreRef || defaultRestoreRef;

    // Get the on-chain installation containing the manifest and behaviors.
    console.info('evaluateBundleCap', {
      manifestBundleRef,
      exportedGetManifest,
      vatAdminSvc,
    });
    let bcapP;
    if ('bundleName' in manifestBundleRef) {
      bcapP = E(vatAdminSvc).getNamedBundleCap(manifestBundleRef.bundleName);
    } else {
      bcapP = E(vatAdminSvc).getBundleCap(manifestBundleRef.bundleID);
    }
    const bundleCap = await bcapP;

    const manifestNS = await evaluateBundleCap(bundleCap);

    console.error('execute', {
      exportedGetManifest,
      behaviors: Object.keys(manifestNS),
    });
    const {
      manifest,
      options: rawOptions,
      installations: rawInstallations,
    } = await manifestNS[exportedGetManifest](
      harden({ restoreRef }),
      ...manifestArgs,
    );

    // Await references in the options or installations.
    const [options, installations] = await Promise.all(
      [rawOptions, rawInstallations].map(shallowlyFulfilled),
    );

    // Publish the installations for behavior dependencies.
    const installAdmin = E(agoricNamesAdmin).lookupAdmin('installation');
    await Promise.all(
      entries(installations || {}).map(([key, value]) => {
        produceInstallations[key].resolve(value);
        return E(installAdmin).update(key, value);
      }),
    );

    // Evaluate the manifest for our behaviors.
    return runModuleBehaviors({
      allPowers,
      behaviors: manifestNS,
      manifest: overrideManifest || manifest,
      makeConfig: (name, _permit) => {
        log('coreProposal:', name);
        return { options };
      },
    });
  };

  // Make the behavior the completion value.
  return behavior;
})({ manifestBundleRef, getManifestCall, overrideManifest, E });
